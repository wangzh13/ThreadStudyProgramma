## 多线程开发基础
`对于笔记当中所有个人理解仅属个人观点，如有错误请联系QQ：2387240503，进行指正`
### 1.线程是什么，线程与进程的区别
* 进程是程序(.exe文件)的一次执行过程，是系统运行程序的基本单位，是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是
死的(静态的)，进程是活的(动态的)。

* 线程是进程中执行运算最小的单位，是进程中的一个实体，是被系统独立调度和分配的，线程不自己拥有系统资源，
只拥有运行中必不可少的资源，但是它可与同属于一个进程中其它线程共享所拥有的资源，一个线程可以创建和撤销另一个线程，同一进程中多个线程可以并发执行
  
* 多线程就是多个线程同时运行(并行)或交替运行(并发)。单核CPU的话是交替运行。多核CPU的话，因为每个CPU有自己的运算单元，所以多个CPU中可以同时运行。

* 一个进程可以包含若干线程(Thread)，线程可以帮助应用程序同时做几件事(比如一个线程向磁盘写入文件，另一个则接收用户的按键操作并及时做出反应，互相不干扰)
在程序被运行后中，系统首先要做的就是为该程序进程建立一个默认线程，然后程序可以根据需要自行添加或删除相关的线程。

* 我自己的简单理解：举例来说QQ，当我们通过点击快捷方式，启动QQ（不管我们是否登录），进程就已经开始运行，在程序运行底层会有相关线程进行工作，各司其职，进行相应操作
### 2.易混概念

* 并发与并行
>      并发：又称共行性，是指处理多个同时性活动的能力，。
>      
>      并行：指同时发生两个并发事件，具有并发的含义。并发不一定并行，也可以说并发事件之间不一定要同一时刻发生。 
>       
>      我自己的简单理解：关键区别在是否同时，并发相当于一个资源，两个或者多个任务去循环使用（争夺资源，或者协调资源）。并行呢，相当于两个任务分别使用两个不同的资源，同时进行

* 同步与异步
>     同步是指：发送方发出数据后，等接收方发回响应以后才进行后续操作 
>       
>     异步是指：发送方发出数据后，不等接收方发回响应，接着进行后续操作

*  线程调度
>      抢占式调度：指的是每条线程执行的时间、线程的切换都由系统控制。系统控制指的是在系统某种运行机制下，
>      可能每条线程都分同样的执行时间片，也可能是某些线程执行的时间片较长，甚至某些线程得不到执行的时间片。在这种机制下，一个线程的堵塞不会导致整个进程堵塞。
> 
>      协同式调度：指某一线程执行完后主动通知系统切换到另一线程上执行。线程的执行时间由线程本身控制，线程切换可以预知，
>      不存在多线程同步问题，但它有一个致命缺点：如果一个线程编写有问题，运行到一半就一直阻塞，那么可能导致整个系统崩溃。
> 
>      Java线程调度就是抢占式调度。

### 3.线程的分类
>      线程可分为用户线程(user thread) 和 守护线程(daemon thread)。
>      守护线程指在后台运行的线程，也称为后台线程，用于提供后台服务。
>      Java创建的线程默认是用户线程。
>      两者的差别是，当进程中还有用户线程在运行时，进程不终止；
>      当进程中只有守护线程在运行时，进程终止。
>      Thread类与守护线程有关的方法声明如下：
        public class DaemonStudyDemo {
             public static void main(String[] args) {
                 Thread thread = new Thread(()->{
                     System.out.println("这是一条守护线程");
                 });
                 //在线程启动之前编写thread.setDaemon(true)这条语句，就可以设置线程为守护线程(参数为true)
                 thread.setDaemon(false);//false 为不是守护线程，如果不编写此语句则默认用户线程
                 thread.start();
             }
         }
### 4.线程的几种状态

1. 初始状态
实现Runnable接口和继承Thread可以得到一个线程类，new一个实例出来，线程就进入了初始状态。如下例1
>      Thread thread = new Thread(()->{
>                           System.out.println("这是一条守护线程");
>                       });
2.1. 就绪状态
就绪状态只是说你资格运行，调度程序没有挑选到你，你就永远是就绪状态。
被称之为“可执行状态”，当线程被new出来后，其他的线程调用了该对象的start()方法，
即thread.start()，此时线程位于“可运行线程池”中，
只等待获取CPU的使用权，随时可以被CPU调用。进入就绪状态的进程除CPU之外，其他运行所需的资源都已经全部获得。
调用线程的start()方法，此线程进入就绪状态。
>      上述例一，调用start()方法进行
>       thread.start();
线程sleep()方法结束可以让线程从阻塞状态变为就绪状态，
线程yield()可以让当前正在运行的线程回到就绪状态，当前线程进入就绪状态。
锁池里的线程拿到对象锁后，进入就绪状态。
2.2. 运行中状态
线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式。

3. 阻塞状态
阻塞状态是线程因为某种原因放弃CPU的使用权，暂时停止运行，知道线程进入就绪状态后才能有机会转到运行状态。
>      阻塞的情况分三种：
>       
>       等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池中”。进入这个状态后是不能自动唤醒的，必须依靠其他线程调用notify()或者notifyAll()方法才能被唤醒。
>       同步阻塞：运行的线程在获取对象的（synchronized）同步锁时，若该同步锁被其他线程占用，则JVM会吧该线程放入“锁池”中。
>       其他阻塞：通过调用线程的sleep()或者join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新回到就绪状态
4. 等待
处于这种状态的线程不会被分配CPU执行时间，它们要等待被显式地唤醒，否则会处于无限期等待的状态。

5. 超时等待
处于这种状态的线程不会被分配CPU执行时间，不过无须无限期等待被其他线程显示地唤醒，在达到一定时间后它们会自动唤醒。

6. 终止状态
当线程的run()方法完成时，或者主线程的main()方法完成时，我们就认为它终止了。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦终止了，就不能复生。
在一个终止的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。

### 5.线程几种方法

1.yield()

Thread.yield()方法的作用：暂停当前正在执行的线程，并执行其他线程。（可能没有效果）

yield()让当前正在运行的线程回到可运行状态，以允许具有相同优先级的其他线程获得运行的机会。因此，使用yield()的目的是让具有相同优先级的线程之间能够适当的轮换执行。但是，实际中无法保证yield()达到让步的目的，因为，让步的线程可能被线程调度程序再次选中。

结论：大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。
示例：

    public class YieldDemo {
        public static void main(String[] args) {
            Thread thread = new Thread(()->{
                for(int i = 0; i <= 30; i ++) {
                    if(i == 4){
                        Thread.yield();
                    }
                    System.out.println("线程1"+"我是"+i);
                }
            });
            Thread thread1 = new Thread(()->{
                for(int i = 0; i <= 30; i ++) {
                    System.out.println("线程2"+"我不是"+i);
                }
            });
            thread.start();
            thread1.start();
        }
    }

2.join()
thread.Join把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。

比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续执行线程B。
t.join();      //调用join方法，等待线程t执行完毕
t.join(1000);  //等待 t 线程，等待时间是1000毫秒。

示例：

       public class JoinDemo {
           public static void main(String[] args) {
       
               Thread thread = new Thread(()->{
                   try {
                       Thread.sleep(1000);
                   } catch (InterruptedException e) {
                       e.printStackTrace();
                   }
                   System.out.println("我是测试线程");
               });
               Thread thread1 = new Thread(()->{
                   System.out.println("我是测试线程2");
               });
               thread.start();
               try {
                   //1.必须放到start()方法后，才可生效.
                   //2.可以通俗理解为插队，
                   //3.先执行调用join（）方法的线程，此线程结束后才可执行主线程。也可以这么理解一群人（多个线程）正在排队进行，当某个线程执行了join（）方法后，此线程就插队到主线程之前
                   //4.对其余线程无影响
                   thread.join();
               } catch (InterruptedException e) {
                   e.printStackTrace();
               }
               thread1.start();
               System.out.println("我是主线程");
           }
       }


3.sleep()与wait()区别
1、sleep() 是Thread的方法，wait() 是Object的方法
2、sleep() 不会释放锁，wait(0) 会释放锁，而且会加入到等待队列中。
3、sleep方法不依赖于同步器synchronized，但是wait需要依赖synchronized关键字。
4、sleep不需要被唤醒（休眠之后推出阻塞），但是wait需要（不指定时间需要被别人中断）。


### 5.线程的具体实现方式
1.继承Thread类
2.实现Runable接口
注：前两种比较常用，也比较常见，这里就不在专门讲述，我们专注看一下第三种方法
3.实现Callable接口，
 第一二种线程执行是没有返回值，而第三种方法是有返回值的
 FutureTask类实现了RunnableFuture接口，RunnableFuture接口继承了Runnable接口
 而FutureTask类的构造函数就需要注入一个实现Callable接口的类
 这时候再类比实现Runable接口的实例，将FutureTask实例进行使用
 具体实现如下
 
    //首先编写一个实现Callable接口的类
     public class CallableDemo implements Callable<Integer> {//<>括号内可以放置一个返回值类型，不放置则为Object
         
         @Override
         public Integer call() throws Exception {
             return 100;
         }
     }
     
     //具体使用
     public class FutureTaskDemo {
         public static void main(String[] args) {
             FutureTask<Integer> futureTask = new FutureTask(new CallableDemo());
             //因为FutureTask实现了RunnableFuture接口，RunnableFuture接口继承了Runnable接口
             //所以跟实现Runable接口的方式差不多
             Thread thread = new Thread(futureTask);
             thread.start();
             try {
                 //这里注明，如果该线程使用时间较长，建议get()放置最后，原因是，如果线程没有计算完毕就调用get(),这里会停滞，直到计算完毕
                 //这样建立线程的目的就变了，所以建议放置最后一步使用
                  Integer result = futureTask.get();//取出最终返回值
                  System.out.println(result);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             } catch (ExecutionException e) {
                 e.printStackTrace();
             }
         }
     }
  
4，使用线程池(推荐)(可以观看后续学习记录)


